user  www-data www-data;
worker_processes 4;  # 设置工作进程数量
error_log $NGINX_DIR/logs/nginx_error.log crit;  # 设置错误日志级别为 crit
pid $NGINX_DIR/logs/nginx.pid;  # 设置 Nginx 进程 ID 文件路径
worker_rlimit_nofile 51200;  # 设置工作进程可打开的最大文件数
#load_module $NGINX_DIR/modules/ngx_http_modsecurity_module.so;  # 加载 ModSecurity 模块

events {
    use epoll;  # 使用 epoll 作为事件模型（适用于 Linux）
    worker_connections 51200;  # 每个工作进程最大连接数
    multi_accept on;  # 启用多重接收
}

http {

    # 这一段是与 wpfastcgi.conf 配套使用 针对 WordPress 的缓存优化 -- start
    # 如果不使用 PHP 或者不打算使用 enable-php-XX-wpfastcgi.conf 文件可以安全删除
    # /dev/shm/nginx-cache/wp 路径报错的话 运行：sudo mkdir -p /var/cache/nginx/wordpress && sudo chown -R www-data:www-data /var/cache/nginx
    fastcgi_cache_key "$scheme$request_method$host$request_uri";
    fastcgi_cache_path /opt/nginx/src/nginx-cache-wp levels=1:2 keys_zone=WORDPRESS:100m inactive=60m max_size=1g;
    fastcgi_cache_use_stale error timeout invalid_header http_500;
    fastcgi_ignore_headers Cache-Control Expires Set-Cookie;
    # 这一段是与 wpfastcgi.conf 配套使用 针对 WordPress 的缓存优化 -- END
    
    include mime.types;  # 包含 MIME 类型配置
    include proxy.conf;  # 包含代理配置

    default_type application/octet-stream;  # 默认文件类型

    server_names_hash_bucket_size 512;  # 设置服务器名称哈希桶大小
    client_header_buffer_size 32k;  # 设置客户端请求头缓冲区大小

    # 5.2.3 确保定义了 URI 的最大缓冲区大小
    large_client_header_buffers 4 16k;  # 设置 URI 缓冲区数量和大小

    # 5.2.2 确保最大请求体大小设置正确
    client_max_body_size 50m;  # 设置最大请求体大小为 50MB

    sendfile on;  # 启用高效文件传输
    tcp_nopush on;  # 优化 TCP 性能
    # aio on;  # 可选: 启用异步 I/O

    # 限制每个 IP 地址的最大连接数
    # limit_conn_zone $binary_remote_addr zone=limitperip:10m; 
    # server {
    #     limit_conn limitperip 10;  # 每个 IP 限制最大连接数为 10
    # }

    # 设置 IP 地址的请求速率限制
    # limit_req_zone $binary_remote_addr zone=ratelimit:10m rate=5r/s;
    # server {
    #     location / {
    #         limit_req zone=ratelimit burst=10 nodelay;  # 设置速率限制
    #     }
    # }

    # 超时设置
    client_body_timeout 15;  # 请求主体超时（秒）
    client_header_timeout 15;  # 请求头超时（秒）
    
    # 根据 CIS nginx 2.4.3 这里应该为10或者更短不应该是60
    keepalive_timeout 60;  # 长连接超时时间（秒）
    
    # 根据 CIS nginx 2.4.4 这里应该为10或者更短不应该是15
    send_timeout 15;  # 发送超时时间（秒）
    
    keepalive_requests 500;  # 设置最大 HTTP 请求数

    # 设置字符集为 UTF-8
    charset utf-8;

    tcp_nodelay on;  # 禁用 Nagle 算法，提高网络性能

    # FastCGI 设置
    fastcgi_connect_timeout 300;  # FastCGI 连接超时（秒）
    fastcgi_send_timeout 300;  # FastCGI 发送超时（秒）
    fastcgi_read_timeout 300;  # FastCGI 读取超时（秒）
    fastcgi_buffer_size 64k;  # FastCGI 缓冲区大小
    fastcgi_buffers 4 64k;  # FastCGI 缓冲区数量和大小
    fastcgi_busy_buffers_size 128k;  # FastCGI 忙缓冲区大小
    fastcgi_temp_file_write_size 256k;  # FastCGI 临时文件写入大小
    fastcgi_intercept_errors on;  # 启用 FastCGI 错误拦截

    # Brotli 压缩设置
    brotli on;  # 启用 Brotli 压缩
    brotli_comp_level 8;  # 设置 Brotli 压缩级别
    brotli_buffers 16 8k;  # Brotli 缓冲区设置
    brotli_min_length 20;  # Brotli 最小压缩长度
    brotli_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript image/svg+xml;  # Brotli 支持的 MIME 类型
    brotli_static always;  # 始终启用 Brotli 静态压缩文件查找
    brotli_window 512k;  # Brotli 窗口大小

    # Gzip 压缩设置
    gzip on;  # 启用 Gzip 压缩
    gzip_min_length 1k;  # Gzip 最小压缩长度
    gzip_buffers 4 16k;  # Gzip 缓冲区设置
    gzip_http_version 1.1;  # 启用 Gzip 压缩对 HTTP/1.1 的支持
    gzip_comp_level 8;  # 设置 Gzip 压缩级别
    gzip_types text/plain application/javascript application/x-javascript text/javascript text/css application/xml application/json image/jpeg image/gif image/png font/ttf font/otf image/svg+xml application/xml+rss text/x-js;  # Gzip 支持的 MIME 类型
    gzip_vary on;  # 启用 Vary 头部
    gzip_proxied expired no-cache no-store private auth;  # 启用代理压缩
    gzip_disable "MSIE [1-6]\.";  # 禁用老旧 IE 浏览器的 Gzip 压缩

    # 限制每个 IP 地址的连接数
    limit_conn_zone $binary_remote_addr zone=perip:20m;  # 定义连接数限制区域
    limit_conn_zone $server_name zone=perserver:20m;  # 定义每个服务器的连接数限制区域

    server_tokens off;  # 隐藏 Nginx 版本信息
    access_log off;  # 禁用访问日志

    # 启用 ModSecurity
    modsecurity on;  # 启用 ModSecurity WAF

    # 根据 CIS nginx 2.4.2
    # 默认拦截 HTTP 请求
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        return 444;
    }

    # 根据 CIS nginx 2.4.2
    # 默认拦截 HTTPS 请求
    server {
        listen 443 ssl default_server;
        listen [::]:443 ssl default_server;
        ssl_certificate     $NGINX_DIR/ssl/default/default.pem;
        ssl_certificate_key $NGINX_DIR/ssl/default/default.key;
        return 444;
    }

    # 加载其他配置文件
    include $NGINX_DIR/conf.d/sites-enabled/*.conf;
}
