# 监听 80 端口，重定向所有 HTTP 请求到 HTTPS
server {
    listen 80 reuseport;
    listen [::]:80 reuseport;
    server_name XXX.com;
    return 301 https://XXX.com$request_uri;
}

# 监听 443 端口，启用 HTTP/3 和 SSL 配置
server {
    listen 443 quic reuseport;
    listen [::]:443 quic reuseport;
    http3 on;

    listen 443 ssl reuseport;
    listen [::]:443 ssl reuseport;
    http2 on;

    server_name XXX.com;
    index index.html;
    root /www/wwwroot/XXX.com;

    # 当用户通过 HTTP 请求访问时，返回 497 状态码，要求使用 HTTPS
    error_page 497 https://$host$request_uri;

    # HTTP/3 特定头部，帮助浏览器发现 HTTP/3
    add_header Alt-Svc 'h3-23=":443"; ma=86400'; 
    add_header Cache-Control "no-store";

    # QUIC 设置
    http3_max_concurrent_streams 128;

    # SSL 配置
    ssl_certificate /opt/nginx/ssl/XXX.com/fullchain.pem;
    ssl_certificate_key /opt/nginx/ssl/XXX.com/privkey.pem;
    
    # SSL 会话配置
    ssl_session_timeout 1d;
    ssl_session_cache shared:MozSSL:10m;  # 关于 40000 个会话
    ssl_session_tickets off;

    # 使用自定义的 Diffie-Hellman 参数（更安全的密钥交换）
    # openssl dhparam -out /opt/ssl/dhparam.pem 2048
    # chmod 400  /opt/ssl/dhparam.pem
    ssl_dhparam /opt/nginx/ssl/dhparam.pem;

    # 启用的 SSL 协议和加密套件
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305;
    ssl_prefer_server_ciphers off;

    # 强制使用强椭圆曲线
    ssl_ecdh_curve X25519:secp384r1;

    # 启用 OCSP stapling，提高证书验证效率
    ssl_stapling on;
    ssl_stapling_verify on;

    # 配置用于 OCSP 响应验证的受信任证书
    ssl_trusted_certificate /opt/nginx/ssl/XXX.com/ca.pem;

    # 配置 DNS 解析器
    resolver 8.8.8.8 9.9.9.9 1.1.1.1 valid=300s;
    resolver_timeout 5s;

    # 强制启用 HTTP Strict Transport Security (HSTS)，提升 HTTPS 安全性
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # 安全 HTTP 头配置
    # 防止点击劫持攻击
    add_header X-Frame-Options "DENY" always;

    # 防止浏览器嗅探 MIME 类型
    add_header X-Content-Type-Options "nosniff" always;

    # 配置内容安全策略（CSP）
    add_header Content-Security-Policy "default-src 'self' https: data: 'unsafe-inline' 'unsafe-eval'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https: data:; style-src 'self' 'unsafe-inline' https: data:; img-src 'self' https: data:; font-src 'self' https: data:; frame-src 'self' https: data:; connect-src 'self' https: data: https://api.wordpress.org; object-src 'none'; base-uri 'self'; form-action 'self'; worker-src 'self' blob:; upgrade-insecure-requests; block-all-mixed-content;" always;

    # 防止泄漏引用来源
    add_header Referrer-Policy "no-referrer";

    # 启用 XSS 保护
    add_header X-XSS-Protection "1; mode=block" always;
    
    # 配置权限策略
    add_header Permissions-Policy "accelerometer=(), camera=(), microphone=(), payment=(), usb=()" always;

    # 增加浏览器信任度和合规建议
    add_header Expect-CT "enforce, max-age=86400";

    # 限制允许的请求方法
    if ($request_method !~ ^(GET|POST|HEAD|OPTIONS)$) {
        return 405;
    }
    add_header Allow "GET, POST, HEAD, OPTIONS" always;

    # 限制每个 IP 的连接数（可选）
    #limit_conn_zone $binary_remote_addr zone=limitperip:10m; 
    #limit_conn limitperip 40;

    # 禁止 POST、PUT 和 DELETE 请求（避免上传、修改、删除文件）
    location / {

    # 应启用速率限制来限制 IP 地址在给定时间段内向服务器发出的请求数量。应根据应用程序的需求和组织政策设置配置值。
    # 限制每个 IP 的请求速率（可选）
    #limit_req_zone $binary_remote_addr zone=ratelimit:10m rate=5r/s;
    #limit_req zone=ratelimit burst=10 nodelay;

    # 禁止 POST、PUT 和 DELETE 请求（避免上传、修改、删除文件）
    if ($request_method = POST) {
        return 403;
    }
    if ($request_method = PUT) {
        return 403;
    }
    if ($request_method = DELETE) {
        return 403;
    }
    }

    # 限制非法 Host 头的请求
    if ($host !~ ^(mz\.855666\.xyz)$ ) {
        return 444;
    }

    # 禁止访问隐藏文件（如 .htaccess、.git 等）
    location ~ ^/(\.user.ini|\.htaccess|\.git|\.env|\.svn|\.project|LICENSE|README.md|\.stfolder|\.stignore|\.well-known) {
        return 444;
    }

    # 拒绝常见爬虫的 User-Agent
    if ($http_user_agent ~* (HTTrack|crawler|scrapy|wget|curl|python|nikto|sqlmap|fimap|nmap|masscan)) {
        return 403;
    }

    # SSL 证书验证相关
    location ~ \.well-known {
        deny all;
    }

    # 禁止上传不安全的文件
    if ( $uri ~ "^/\.well-known/.*\.(php|jsp|py|js|css|lua|ts|go|zip|tar\.gz|rar|7z|sql|bak)$" ) {
        return 403;
    }

    # 配置图片文件缓存
    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$ {
        expires 30d;
        error_log /dev/null;
        access_log /dev/null;
    }

    # 配置静态文件缓存
    location ~ .*\.(js|css)?$ {
        expires 12h;
        error_log /dev/null;
        access_log /dev/null; 
    }

    # 禁止访问隐藏文件（如 .htaccess、.htpasswd、.DS_Store 等）
    location ~ /\. {
        deny all;
    }

    # 启用 ModSecurity 并加载规则
    modsecurity on;
    modsecurity_rules_file /opt/owasp/conf/XXX.com.conf;
    modsecurity_rules_file /opt/owasp/conf/main.conf;

    # 引入 wordpress 规则
    #include /opt/owasp/conf/nginx-wordpress.conf;

    # 配置日志文件
    access_log /opt/nginx/logs/XXX.com.log;
    error_log /opt/nginx/logs/XXX.com.error.log;
}
