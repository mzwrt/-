server {
    listen 80 reuseport;
    listen [::]:80 reuseport;
    server_name XXXX.com;
    return 301 https://XXXX.com$request_uri;
}

server {
    listen 443 ssl reuseport;
    listen [::]:443 ssl reuseport;
    http2 on;
    
    listen 443 quic reuseport;
    listen [::]:443 quic reuseport;
    http3 on;

    server_name XXXX.com;
    index index.html;
    root /www/wwwroot/XXXX.com;

    # SSL Configuration
    ssl_certificate /opt/ssl/XXXX.com/fullchain.pem;
    ssl_certificate_key /opt/ssl/XXXX.com/privkey.pem;
    
          ## SSL start ##
    ssl_session_timeout 1d;
    ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
    ssl_session_tickets off;

    # curl https://ssl-config.mozilla.org/ffdhe2048.txt > /path/to/dhparam
    # openssl dhparam -out /opt/ssl/dhparam.pem 2048
    # chmod 400  /opt/ssl/dhparam.pem
    ssl_dhparam /opt/ssl/dhparam.pem;

    # intermediate configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305;
    ssl_prefer_server_ciphers off;

    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;

    # verify chain of trust of OCSP response using Root CA and Intermediate certs
    ssl_trusted_certificate /opt/ssl/XXXX.com/ca.pem;

    # replace with the IP address of your resolver
    resolver 127.0.0.1 1.1.1.1 valid=300s;
    # 当服务器配置强制要求所有的 HTTP 请求都通过 HTTPS 进行访问时，如果客户端发送的请求仍然是 HTTP 请求，则服务器会返回 497 状态码，告知客户端需要使用 HTTPS。
    error_page 497  https://$host$request_uri;
		#SSL-END
		
    # HTTP/3 特定头部
    add_header Alt-Svc 'h3-23=":443"; ma=86400'; # Alt-Svc 帮助浏览器发现 HTTP/3
    add_header Cache-Control "no-store";

    # QUIC 设置
    http3_max_concurrent_streams 128;
		
		#安全 HTTP 头配置
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;


    #PHP-INFO-START  PHP reference configuration, allowed to be commented, deleted or modified
    #include enable-php-00.conf;
    #include /www/server/nginx/conf/wordpress/nginx-wordpress.conf;
    #PHP-INFO-END

# 5.3.1 确保 X-Frame-Options 标头已配置并启用
# 应将 X-Frame-Options 标头设置为允许特定网站或根本不允许任何网站将您的网站作为其自己的对象嵌入，具体取决于您的组织政策和应用程序需求。
# X-Frame-Options 标头可让您减轻点击劫持攻击的风险。
#add_header X-Frame-Options "SAMEORIGIN" always;
add_header X-Frame-Options "DENY" always;
 
# 5.3.2 确保 X-Content-Type-Options 标头已配置并启用
# 应使用 X-Content-Type-Options 标头来强制支持的用户代理检查 HTTP 响应的内容类型标头是否与请求目的地所期望的内容一致。
# 使用“nosniff”指令实现 X-Content-Type-Options 标头有助于防止用户代理嗅探响应中的内容类型的驱动下载攻击。
add_header X-Content-Type-Options "nosniff" always;

# 5.3.3 确保内容安全策略 (CSP) 已启用并正确配置
# 内容安全策略允许管理员指定允许脚本执行的位置，或者是否可以执行脚本。应使用内容安全策略来提高用户对您网站的信任度。
# 内容安全策略帮助组织减轻和报告跨站点脚本 (XSS) 攻击。
#add_header Content-Security-Policy "default-src 'self'" always;
add_header Content-Security-Policy "default-src 'self' https: data: 'unsafe-inline' 'unsafe-eval'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https: data:; style-src 'self' 'unsafe-inline' https: data:; img-src 'self' https: data:; font-src 'self' https: data:; frame-src 'self' https: data:; connect-src 'self' https: data: https://api.wordpress.org; object-src 'none'; base-uri 'self'; form-action 'self'; worker-src 'self' blob:; upgrade-insecure-requests; block-all-mixed-content;";

# 5.3.4 确保推荐人策略已启用并正确配置
# 当源网站将用户引导至另一个网站时，系统会发送一个引荐来源，以标识用户所来自的 URL。根据您网站的具体用途，这可能会给用户带来隐私问题。引荐来源政策使组织能够定义哪些网站应该看到引荐来自您的网站，这有助于保护用户隐私。
# 如果您在 URL 参数中使用敏感数据（例如个人信息、用户名和密码或持久会话），则 Referrer 标头可能会将敏感数据暴露在其他 Web 服务器的日志中。最终，根据您的应用程序设计，未使用正确配置的 Referrer 策略可能会导致会话劫持、凭据收集或敏感数据暴露在第三方日志中。
add_header Referrer-Policy "no-referrer";

#这条 Nginx 配置用于添加 HTTP 响应头，以帮助保护您的网站免受跨站脚本攻击（XSS）的影响。这个头部指令告诉浏览器在检测到可能的 XSS 攻击时，应当自动尝试阻止页面加载。
    add_header X-XSS-Protection "1; mode=block" always;
    
    # 这条 Nginx 配置用于设置 HTTP 响应头部中的 Permissions-Policy。它的作用是告诉浏览器如何处理特定功能和 API 的权限请求，以保护用户的隐私和安全。
    add_header Permissions-Policy "interest-cohort=()" always;

    # 只允许 GET, POST, HEAD, OPTIONS
if ( $request_method !~ ^(GET|POST|HEAD|OPTIONS)$ ) {
    return 405;
}
add_header Allow "GET, POST, HEAD, OPTIONS" always;


    # 5.2.4 确保每个 IP 地址的连接数受到限制
    # 应限制从单个 IP 地址到您的服务器允许的最大同时连接数。应将其设置为符合您组织政策的值。
#http {
#  limit_conn_zone $binary_remote_addr zone=limitperip:10m; 
#  server {
    #limit_conn limitperip 40;
#  }
#}

    # 5.2.5 确保设置了 IP 地址的速率限制
    # 应启用速率限制来限制 IP 地址在给定时间段内向服务器发出的请求数量。应根据应用程序的需求和组织政策设置配置值。
    # 因为伪静态规则冲突所以整合到一起
#http {
#  limit_req_zone $binary_remote_addr zone=ratelimit:10m rate=5r/s;
#  server {
    location / {
      #limit_req zone=ratelimit burst=10 nodelay;
          # 禁止通过 POST 请求上传文件
    if ($request_method = POST) {
        return 403;
    }

    # 禁止 PUT 请求（用于修改文件）
    if ($request_method = PUT) {
        return 403;
    }

    # 禁止 DELETE 请求（防止删除文件）
    if ($request_method = DELETE) {
        return 403;
    }
    }
#  }
#}

    # Forbidden files or directories
    # Forbidden files or directories
    location ~ ^/(\.user.ini|\.htaccess|\.git|\.env|\.svn|\.project|LICENSE|README.md|\.stfolder|\.stignore|\.well-known)
    {
        return 444;
    }

    # Directory verification related settings for one-click application for SSL certificate
    location ~ \.well-known{
        allow all;
    }

    #Prohibit putting sensitive files in certificate verification directory
    if ( $uri ~ "^/\.well-known/.*\.(php|jsp|py|js|css|lua|ts|go|zip|tar\.gz|rar|7z|sql|bak)$" ) {
        return 403;
    }

    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
    {
        expires      30d;
        error_log /dev/null;
        access_log /dev/null;
    }

    location ~ .*\.(js|css)?$
    {
        expires      12h;
        error_log /dev/null;
        access_log /dev/null; 
    }
    
# Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
# Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
location ~ /\. {
    deny all;
}


# 开启和引入 OWASP 规则
    # Enable ModSecurity
    modsecurity on;
    modsecurity_rules_file /opt/owasp/conf/XXXX.com.conf;
    modsecurity_rules_file /opt/owasp/conf/main.conf;

# OWASP END

    # 引入wordpress常用常用禁止规则增加安全性
    #include /opt/owasp/conf/nginx-wordpress.conf;
    #END

    access_log /opt/nginx/logs/XXXX.com.log;
    error_log /opt/nginx/logs/XXXX.com.error.log;
}

